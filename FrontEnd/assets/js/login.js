if (!document.querySelector(".form-login")) {
    console.warn("‚ö†Ô∏è `login.js` est ex√©cut√©, mais `.form-login` est introuvable. V√©rifie si tu es bien sur `login.html`.");
} else {
    document.addEventListener("DOMContentLoaded", function () {
        console.log("DOMContentLoaded : Le DOM est enti√®rement charg√© et pars√© !");

        // S√©lection des √©l√©ments du DOM (formulaire et message d'erreur)
        const formLogin = document.querySelector(".form-login");
        const messageErreur = document.getElementById("message-erreur");

        if (!formLogin) {
            console.error("‚ùå Erreur : L'√©l√©ment '.form-login' est introuvable dans le DOM !");
            return;
        }

        console.log("‚úÖ L'√©l√©ment .form-login a √©t√© trouv√© dans le DOM.");

        formLogin.addEventListener("submit", async (event) => {
            event.preventDefault();

            const email = document.getElementById("email").value;
            const password = document.getElementById("password").value;

            const loginData = { email, password };
            console.log("loginData construit:", loginData);

            const apiUrlLogin = "http://localhost:5678/api/users/login";
            console.log("URL de l'API:", apiUrlLogin);

            try {
                console.log("D√©but du bloc try...catch");

                const response = await fetch(apiUrlLogin, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(loginData)
                });

                console.log("Requ√™te fetch envoy√©e, r√©ponse re√ßue:", response);

                if (response.ok) {
                    console.log("Connexion r√©ussie !");
                    const data = await response.json();
                    console.log("Data re√ßue:", data);
                    const token = data.token;
                    console.log("Token r√©cup√©r√©:", token);
                    localStorage.setItem("token", token);
                    console.log("Token stock√© dans localStorage.");
                    window.location.href = "index.html";
                } else {
                    console.error("Erreur de connexion:", response.status, response.statusText);
                    messageErreur.textContent = "Erreur d'authentification. Veuillez v√©rifier vos identifiants.";
                    messageErreur.style.display = "block";
                }
            } catch (error) {
                console.error("Erreur Fetch:", error);
                messageErreur.textContent = "Une erreur s'est produite lors de la connexion. Veuillez r√©essayer plus tard.";
                messageErreur.style.display = "block";
            }
        });
    });
}

document.addEventListener("DOMContentLoaded", () => {
    console.log("‚úÖ Script `modal.js` charg√© !");

    // S√©lectionne tous les boutons de suppression
    const deleteButtons = document.querySelectorAll(".btn-delete");

    if (deleteButtons.length === 0) {
        console.warn("‚ö†Ô∏è Aucun bouton de suppression trouv√©. V√©rifie ton HTML !");
        return;
    }

    console.log(`üü¢ ${deleteButtons.length} bouton(s) de suppression d√©tect√©(s).`);

    deleteButtons.forEach(button => {
        button.addEventListener("click", async (event) => {
            event.preventDefault();

            // R√©cup√©ration du token
            const token = localStorage.getItem("token");
            if (!token) {
                console.error("‚ùå Aucun token trouv√©. L'utilisateur doit √™tre connect√© !");
                alert("Vous devez √™tre connect√© pour supprimer un projet.");
                return;
            }
            console.log("üîë Token r√©cup√©r√© avec succ√®s.");

            // R√©cup√©ration de l'ID du projet √† supprimer
            const projectId = button.dataset.id; // Ex: data-id="1"
            if (!projectId) {
                console.error("‚ùå Impossible de r√©cup√©rer l'ID du projet.");
                return;
            }

            console.log(`üóëÔ∏è Suppression demand√©e pour le projet ID: ${projectId}`);

            // Confirmation utilisateur
            if (!confirm("Voulez-vous vraiment supprimer ce projet ?")) {
                console.log("‚ùå Suppression annul√©e.");
                return;
            }

            try {
                console.log(`‚è≥ Envoi de la requ√™te DELETE √† l'API pour le projet ID: ${projectId}...`);

                // Requ√™te DELETE vers l'API
                const response = await fetch(`http://localhost:5678/api/works/${projectId}`, {
                    method: "DELETE",
                    headers: {
                        "Accept": "*/*",
                        "Authorization": `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error(`‚ùå Erreur API: ${response.status}`);
                }

                console.log(`‚úÖ Projet ID: ${projectId} supprim√© avec succ√®s !`);

                // Supprimer l'√©l√©ment du DOM apr√®s suppression r√©ussie
                supprimerProjetDuDOM(projectId);

            } catch (error) {
                console.error("‚ùå Erreur lors de la suppression :", error);
            }
        });
    });
});

// Fonction pour supprimer le projet du DOM
function supprimerProjetDuDOM(id) {
    console.log(`üîç Tentative de suppression du projet ID: ${id} dans le DOM...`);
    const element = document.querySelector(`[data-id="${id}"]`);
    if (element) {
        element.remove();
        console.log(`üóëÔ∏è Projet ID: ${id} supprim√© du DOM.`);
    } else {
        console.warn(`‚ö†Ô∏è Projet ID: ${id} introuvable dans le DOM.`);
    }
}
