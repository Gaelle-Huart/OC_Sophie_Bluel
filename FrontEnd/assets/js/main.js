// URL de l'API pour r√©cup√©rer les ≈ìuvres (route GET /works de ton backend)
const apiUrlWorks = 'http://localhost:5678/api/works'; // ‚ö†Ô∏è VERIFIEZ ET ADAPTEZ LE PORT SI NECESSAIRE !

fetch(apiUrlWorks)
    .then(response => {
        if (!response.ok) {
            throw new Error(`Erreur HTTP! statut: ${response.status}`);
        }
        return response.json();
    })
    .then(works => {
        console.log('Donn√©es des ≈ìuvres r√©cup√©r√©es de l\'API:', works);

        // 1. Cr√©er un Set pour stocker les noms de cat√©gories uniques
        const categoriesSet = new Set();

        // 2. Parcourir le tableau 'works' et ajouter le nom de chaque cat√©gorie au Set
        works.forEach(work => {
            categoriesSet.add(work.category.name); // ‚úÖ On ajoute le NOM de la cat√©gorie (work.category.name) au Set
        });

        // 3. Convertir le Set en un tableau pour pouvoir le manipuler plus facilement
        const categoriesArray = Array.from(categoriesSet);

        console.log('Liste des cat√©gories uniques:', categoriesArray); // Pour v√©rifier la liste des cat√©gories uniques dans la console

        afficherMenuCategories(categoriesArray); // ‚úÖ Appelle la fonction pour cr√©er le menu de cat√©gories

        console.log('Appel de afficherGalerie avec:', works); // ‚úÖ AJOUT√â POUR V√âRIFIER SI afficherGalerie EST BIEN APPEL√âE
        afficherGalerie(works); // ‚úÖ Appelle la fonction pour afficher la galerie (compl√®te pour l'instant)
    })
    .catch(error => {
        console.error('Erreur lors de la r√©cup√©ration des ≈ìuvres depuis l\'API:', error);
    });

// ‚û°Ô∏è  Fonction pour cr√©er et afficher le menu de cat√©gories
function afficherMenuCategories(categories) {
    const filtersDiv = document.querySelector(".filters");
    filtersDiv.innerHTML = '';

    // 1. Bouton "Tous"
    const tousButton = document.createElement("button");
    tousButton.textContent = "Tous";
    tousButton.classList.add("filter-button");

    // ‚úÖ Ajoute un gestionnaire d'√©v√©nement au bouton "Tous" : quand on clique, appelle filtrerGalerieParCategorie("Tous")
    tousButton.addEventListener("click", function () {
        filtrerGalerieParCategorie("Tous"); // ‚úÖ Appelle filtrerGalerieParCategorie avec la cat√©gorie "Tous"
    });

    filtersDiv.appendChild(tousButton);

    // 2. Boutons de cat√©gorie
    categories.forEach(categoryName => {
        const categoryButton = document.createElement("button");
        categoryButton.textContent = categoryName;
        categoryButton.classList.add("filter-button");

        // ‚úÖ Ajoute un gestionnaire d'√©v√©nement √† chaque bouton de cat√©gorie : quand on clique, appelle filtrerGalerieParCategorie(nomDeLaCategorie)
        categoryButton.addEventListener("click", function () {
            filtrerGalerieParCategorie(categoryName); // ‚úÖ Appelle filtrerGalerieParCategorie avec le nom de la cat√©gorie
        });

        filtersDiv.appendChild(categoryButton);
    });
}

// ‚û°Ô∏è  Fonction pour FILTRER la galerie par cat√©gorie (CODE MODIFI√â POUR LE FILTRAGE !)
function filtrerGalerieParCategorie(categorieSelectionnee) {
    console.log('Filtrage par cat√©gorie :', categorieSelectionnee);

    fetch(apiUrlWorks) // On refait une requ√™te √† l'API pour r√©cup√©rer TOUTES les ≈ìuvres (on pourrait optimiser √ßa plus tard)
        .then(response => response.json())
        .then(works => {
            let ≈ìuvresFiltrees; // D√©clare une variable pour stocker les ≈ìuvres filtr√©es

            if (categorieSelectionnee === "Tous") {
                // Si cat√©gorie "Tous" est s√©lectionn√©e, on affiche TOUTES les ≈ìuvres (pas de filtre)
                oeuvresFiltrees = works;
            } else {
                // Sinon, on filtre les ≈ìuvres pour ne garder que celles de la cat√©gorie s√©lectionn√©e
                oeuvresFiltrees = works.filter(work => work.category.name === categorieSelectionnee);
            }

            console.log('≈íuvres filtr√©es pour la cat√©gorie', categorieSelectionnee + ':', ≈ìuvresFiltrees); // Pour v√©rifier les ≈ìuvres filtr√©es dans la console

            afficherGalerie(oeuvresFiltrees); // ‚úÖ APPELLE afficherGalerie() en lui donnant le TABLEAU DES ≈íUVRES FILTR√âES (oeuvresFiltrees)
        });
}

// ‚û°Ô∏è  Fonction pour afficher les ≈ìuvres dans la galerie
function afficherGalerie(works) {
    const galleryDiv = document.querySelector(".gallery"); // ‚úÖ S√©lectionne l'√©l√©ment HTML de ta galerie (v√©rifie la classe ou l'ID dans ton index.html)

    // ‚ö†Ô∏è  VIDE le contenu HTML de la galerie avant de la remplir (important si tu recharges la page)
    galleryDiv.innerHTML = '';

    works.forEach(work => { // Pour chaque ≈ìuvre dans le tableau 'works'
        // Cr√©e les √©l√©ments HTML pour chaque ≈ìuvre (figure, image, l√©gende)
        const figureElement = document.createElement("figure");
        const imageElement = document.createElement("img");

        imageElement.src = work.imageUrl; // ‚úÖ Nom du champ "imageUrl" CORRECT d'apr√®s Swagger
        imageElement.alt = work.title;   // ‚úÖ Nom du champ "title" CORRECT d'apr√®s Swagger
        const captionElement = document.createElement("figcaption");
        captionElement.textContent = work.title; // ‚úÖ Nom du champ "title" CORRECT d'apr√®s Swagger

        // Ajoute les √©l√©ments <img> et <figcaption> √† l'√©l√©ment <figure>
        figureElement.appendChild(imageElement);
        figureElement.appendChild(captionElement);

        // Ajoute l'√©l√©ment <figure> (qui repr√©sente une ≈ìuvre) √† l'√©l√©ment <div class="gallery">
        galleryDiv.appendChild(figureElement);
    });
}

document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("photo-form");
    const inputFile = document.getElementById("btn-ajouter-photo");
    const inputTitle = document.getElementById("photo-title");
    const inputCategory = document.getElementById("photo-category");
    const btnValidate = document.getElementById("photo-validate");

    // V√©rifie si tous les √©l√©ments sont bien pr√©sents
    if (!form || !inputFile || !inputTitle || !inputCategory || !btnValidate) {
        console.error("‚ùå Erreur : Un ou plusieurs √©l√©ments du formulaire sont introuvables !");
        return;
    }

    // D√©sactiver le bouton "Valider" tant que le formulaire n'est pas rempli
    form.addEventListener("input", function () {
        if (inputFile.files.length > 0 && inputTitle.value.trim() !== "" && inputCategory.value !== "") {
            btnValidate.removeAttribute("disabled");
        } else {
            btnValidate.setAttribute("disabled", true);
        }
    });

    // Gestion de la soumission du formulaire
    form.addEventListener("submit", async function (event) {
        event.preventDefault();

        // V√©rification du fichier s√©lectionn√©
        if (inputFile.files.length === 0) {
            console.error("‚ùå Erreur : Aucun fichier s√©lectionn√©.");
            return;
        }

        // Cr√©ation de l'objet FormData pour l'envoi du fichier et des informations
        const formData = new FormData();
        formData.append("image", inputFile.files[0]);
        formData.append("title", inputTitle.value.trim());
        formData.append("category", inputCategory.value);

        console.log("üì§ Envoi des donn√©es :", formData);

        // R√©cup√©ration du token pour l'authentification
        const token = localStorage.getItem("token");
        if (!token) {
            console.error("‚ùå Erreur : Token introuvable, connexion requise !");
            return;
        }

        try {
            const response = await fetch("http://localhost:5678/api/works", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`
                },
                body: formData
            });

            if (!response.ok) throw new Error(`Erreur ${response.status}`);

            const newImage = await response.json();
            console.log("‚úÖ Image ajout√©e avec succ√®s :", newImage);

            // Afficher imm√©diatement l'image ajout√©e dans la galerie sans recharger la page
            addImageToGallery(newImage);

        } catch (error) {
            console.error("‚ùå Erreur lors de l'ajout de l'image :", error);
        }
    });

    // Fonction pour afficher l'image dans la galerie apr√®s l'ajout
    function addImageToGallery(image) {
        const galleryGrid = document.querySelector(".gallery-grid");
        if (!galleryGrid) {
            console.error("‚ùå Erreur : La galerie n'a pas √©t√© trouv√©e.");
            return;
        }

        const projectDiv = document.createElement("div");
        projectDiv.classList.add("modal-project");

        const img = document.createElement("img");
        img.src = image.imageUrl;
        img.alt = image.title;
        img.classList.add("modal-project-image");

        const deleteBtn = document.createElement("button");
        deleteBtn.classList.add("btn-delete");
        deleteBtn.innerHTML = `<i class="fa-solid fa-trash"></i>`;

        projectDiv.appendChild(img);
        projectDiv.appendChild(deleteBtn);
        galleryGrid.appendChild(projectDiv);

        console.log("üì∏ Nouvelle image ajout√©e dans la galerie !");
    }
});
