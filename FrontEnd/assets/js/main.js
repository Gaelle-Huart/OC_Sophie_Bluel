// main.js

// URL de l'API pour r√©cup√©rer les ≈ìuvres (route GET /works de ton backend)
const apiUrlWorks = 'http://localhost:5678/api/works'; // ‚ö†Ô∏è VERIFIEZ ET ADAPTEZ LE PORT SI NECESSAIRE !

// ‚û°Ô∏è  Fonction pour afficher les ≈ìuvres dans la galerie
function afficherGalerie(works) {
    console.log("‚û°Ô∏è Fonction afficherGalerie() appel√©e dans main.js avec les ≈ìuvres :", works); // ‚úÖ LOG
    const galleryDiv = document.querySelector(".gallery"); // ‚úÖ S√©lectionne l'√©l√©ment HTML de ta galerie (v√©rifie la classe ou l'ID dans ton index.html)

    // ‚ö†Ô∏è  VIDE le contenu HTML de la galerie avant de la remplir (important si tu recharges la page)
    galleryDiv.innerHTML = '';

    works.forEach(work => { // Pour chaque ≈ìuvre dans le tableau 'works'
        // Cr√©e les √©l√©ments HTML pour chaque ≈ìuvre (figure, image, l√©gende)
        const figureElement = document.createElement("figure");
        const imageElement = document.createElement("img");

        imageElement.src = work.imageUrl; // ‚úÖ Nom du champ "imageUrl" CORRECT d'apr√®s Swagger
        imageElement.alt = work.title;   // ‚úÖ Nom du champ "title" CORRECT d'apr√®s Swagger
        const captionElement = document.createElement("figcaption");
        captionElement.textContent = work.title; // ‚úÖ Nom du champ "title" CORRECT d'apr√®s Swagger

        // Ajoute les √©l√©ments <img> et <figcaption> √† l'√©l√©ment <figure>
        figureElement.appendChild(imageElement);
        figureElement.appendChild(captionElement);

        // Ajoute l'√©l√©ment <figure> (qui repr√©sente une ≈ìuvre) √† l'√©l√©ment <div class="gallery">
        galleryDiv.appendChild(figureElement);
    });
    console.log("‚úÖ Galerie principale mise √† jour visuellement dans main.js."); // ‚úÖ LOG
}

// ‚û°Ô∏è  Fonction pour cr√©er et afficher le menu de cat√©gories
function afficherMenuCategories(categories) {
    console.log("‚û°Ô∏è Fonction afficherMenuCategories() appel√©e dans main.js avec les cat√©gories :", categories); // ‚úÖ LOG
    const filtersDiv = document.querySelector(".filters");
    filtersDiv.innerHTML = '';

    // 1. Bouton "Tous"
    const tousButton = document.createElement("button");
    tousButton.textContent = "Tous";
    tousButton.classList.add("filter-button");

    // ‚úÖ Ajoute un gestionnaire d'√©v√©nement au bouton "Tous" : quand on clique, appelle filtrerGalerieParCategorie("Tous")
    tousButton.addEventListener("click", function () {
        filtrerGalerieParCategorie("Tous"); // ‚úÖ Appelle filtrerGalerieParCategorie avec la cat√©gorie "Tous"
    });

    filtersDiv.appendChild(tousButton);

    // 2. Boutons de cat√©gorie
    categories.forEach(categoryName => {
        const categoryButton = document.createElement("button");
        categoryButton.textContent = categoryName;
        categoryButton.classList.add("filter-button");

        // ‚úÖ Ajoute un gestionnaire d'√©v√©nement √† chaque bouton de cat√©gorie : quand on clique, appelle filtrerGalerieParCategorie(nomDeLaCategorie)
        categoryButton.addEventListener("click", function () {
            filtrerGalerieParCategorie(categoryName); // ‚úÖ Appelle filtrerGalerieParCategorie avec le nom de la cat√©gorie
        });

        filtersDiv.appendChild(categoryButton);
    });
    console.log("‚úÖ Menu des cat√©gories mis √† jour visuellement dans main.js."); // ‚úÖ LOG
}

// ‚û°Ô∏è  Fonction pour FILTRER la galerie par cat√©gorie
function filtrerGalerieParCategorie(categorieSelectionnee) {
    console.log('‚û°Ô∏è Fonction filtrerGalerieParCategorie() appel√©e dans main.js pour la cat√©gorie :', categorieSelectionnee); // ‚úÖ LOG
    fetch(apiUrlWorks) // On refait une requ√™te √† l'API pour r√©cup√©rer TOUTES les ≈ìuvres (on pourrait optimiser √ßa plus tard)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Erreur HTTP lors du filtrage par cat√©gorie dans main.js: ${response.status}`); // ‚úÖ LOG erreur HTTP filtrage
            }
            return response.json();
        })
        .then(works => {
            let ≈ìuvresFiltrees; // D√©clare une variable pour stocker les ≈ìuvres filtr√©es

            if (categorieSelectionnee === "Tous") {
                // Si cat√©gorie "Tous" est s√©lectionn√©e, on affiche TOUTES les ≈ìuvres (pas de filtre)
                oeuvresFiltrees = works;
                console.log("üîç Cat√©gorie s√©lectionn√©e : Tous - Affichage de toutes les ≈ìuvres dans main.js."); // ‚úÖ LOG cat√©gorie "Tous"
            } else {
                // Sinon, on filtre les ≈ìuvres pour ne garder que celles de la cat√©gorie s√©lectionn√©e
                oeuvresFiltrees = works.filter(work => work.category.name === categorieSelectionnee);
                console.log(`üîç Cat√©gorie s√©lectionn√©e : ${categorieSelectionnee} - ≈íuvres filtr√©es dans main.js :`, ≈ìuvresFiltrees); // ‚úÖ LOG cat√©gorie sp√©cifique + ≈ìuvres filtr√©es
            }

            afficherGalerie(oeuvresFiltrees); // ‚úÖ APPELLE afficherGalerie() en lui donnant le TABLEAU DES ≈íUVRES FILTR√âES (oeuvresFiltrees)
        })
        .catch(error => {
            console.error('‚ùå Erreur lors du filtrage de la galerie par cat√©gorie dans main.js :', error); // ‚úÖ LOG erreur JS filtrage
        });
}


document.addEventListener("DOMContentLoaded", async function () {
    console.log("‚úÖ DOMContentLoaded dans main.js");

    console.log("‚ö°Ô∏è D√©but de la r√©cup√©ration initiale des ≈ìuvres et des cat√©gories depuis l'API dans main.js..."); // ‚úÖ LOG initial fetch
    fetch(apiUrlWorks)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Erreur HTTP initiale dans main.js! statut: ${response.status}`); // ‚úÖ LOG erreur HTTP initial
            }
            console.log("‚úÖ R√©ponse de l'API re√ßue avec succ√®s pour la r√©cup√©ration initiale des ≈ìuvres dans main.js."); // ‚úÖ LOG succ√®s fetch initial
            return response.json();
        })
        .then(works => {
            console.log('Donn√©es des ≈ìuvres r√©cup√©r√©es de l\'API dans main.js:', works);

            // 1. Cr√©er un Set pour stocker les noms de cat√©gories uniques
            const categoriesSet = new Set();

            // 2. Parcourir le tableau 'works' et ajouter le nom de chaque cat√©gorie au Set
            works.forEach(work => {
                categoriesSet.add(work.category.name); // ‚úÖ On ajoute le NOM de la cat√©gorie (work.category.name) au Set
            });

            // 3. Convertir le Set en un tableau pour pouvoir le manipuler plus facilement
            const categoriesArray = Array.from(categoriesSet);

            console.log('Liste des cat√©gories uniques dans main.js:', categoriesArray); // Pour v√©rifier la liste des cat√©gories uniques dans la console

            afficherMenuCategories(categoriesArray); // ‚úÖ Appelle la fonction pour cr√©er le menu de cat√©gories

            console.log('Appel initial de afficherGalerie depuis main.js avec:', works); // ‚úÖ AJOUT√â POUR V√âRIFIER SI afficherGalerie EST BIEN APPEL√âE
            afficherGalerie(works); // ‚úÖ Appelle la fonction pour afficher la galerie (compl√®te pour l'instant)
        })
        .catch(error => {
            console.error('‚ùå Erreur lors de la r√©cup√©ration initiale des ≈ìuvres depuis l\'API dans main.js:', error); // ‚úÖ LOG erreur fetch initial
        });

    const btnModifier = document.getElementById("modifier-button"); // ‚úÖ Assurez-vous que vous avez bien r√©cup√©r√© le bouton "Modifier"

    if (!btnModifier) {
        console.error("‚ùå Erreur : Bouton 'Modifier' introuvable dans main.js!");
        return;
    }

    // ‚úÖ‚úÖ‚úÖ NOUVEAU : V√©rification du token pour d√©terminer si c'est un admin
    const token = localStorage.getItem("token");

    if (token) {
        // ‚úÖ Token trouv√© : Utilisateur consid√©r√© comme ADMIN
        console.log("üîë Token d'admin trouv√© dans main.js. Affichage de la vue ADMIN.");
        btnModifier.style.display = "block"; // Afficher le bouton "Modifier" pour les admins (ou 'inline-block' selon votre CSS)
    } else {
        // ‚ùå Token non trouv√© : Utilisateur consid√©r√© comme UTILISATEUR NORMAL
        console.log("üë§ Aucun token d'admin trouv√© dans main.js. Affichage de la vue UTILISATEUR.");
        btnModifier.style.display = "none"; // Cacher le bouton "Modifier" pour les utilisateurs normaux
    }


    console.log("‚úÖ Fin du DOMContentLoaded dans main.js");
});